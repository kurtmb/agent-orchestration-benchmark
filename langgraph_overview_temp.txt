LangGraph Setup & Usage Guide (ChatGPT-4o-mini + JSON Tools Only)
1) Install
python -m venv lgenv
source lgenv/bin/activate   # macOS/Linux
lgenv\Scripts\activate      # Windows

pip install --upgrade pip
# Core packages:
pip install -U langgraph langchain langchain-openai


(Install line adapted from LangGraph’s docs; OpenAI access comes via langchain-openai.) 
LangChain Docs
LangChain

2) Set API key
# macOS/Linux
export OPENAI_API_KEY="YOUR_OPENAI_API_KEY"

# Windows PowerShell
$env:OPENAI_API_KEY="YOUR_OPENAI_API_KEY"

3) Quickstart (single JSON tool, enforced JSON output)

Create lg_quickstart.py:

from typing import TypedDict, Dict, Any
from langchain_openai import ChatOpenAI
from langchain.tools import tool
from langgraph.prebuilt import create_react_agent

# ---- Model: always use ChatGPT-4o-mini ----
llm = ChatOpenAI(model="gpt-4o-mini", temperature=0)  # requires OPENAI_API_KEY

# ---- JSON tool(s): must return dicts only ----
@tool("add_numbers", return_direct=False)
def add_numbers(a: int, b: int) -> Dict[str, Any]:
    """Add two integers and return a JSON object with the sum."""
    return {"sum": a + b}

tools = [add_numbers]

# ---- Build a ReAct-style agent over tools ----
# (LangGraph prebuilt helper wraps a small graph for tool-using agents.)
agent = create_react_agent(
    llm,
    tools,
    # System message enforces JSON-only final answers:
    prompt=(
        "You are a tool-using agent. "
        "Use tools as needed. "
        "When you produce the FINAL answer to the user, "
        "it MUST be a single valid JSON object with no extra text."
    ),
    name="json_agent",
)

# ---- Run: instruct it to use the tool and return JSON only ----
if __name__ == "__main__":
    result = agent.invoke({"messages": [("user", "Add 3 and 5; return JSON only.")]})
    # `result` is a dict with a 'messages' list; print ONLY the final model text
    # which we've constrained to be a JSON object.
    final = result["messages"][-1].content
    print(final)  # should be like: {"sum": 8}


Notes:

create_react_agent is the LangGraph helper for a tool-using agent. 
PyPI

ChatOpenAI(model="gpt-4o-mini") uses the OpenAI chat model via langchain-openai. 
LangChain

Run it:

python lg_quickstart.py

4) JSON-only policy (how it’s enforced)

Tools return JSON (dict) only.

System prompt requires the final answer to be a single JSON object.

Caller prints only the final message, so any stray text would break your pipeline—helping keep outputs strictly JSON.

5) Useful maintenance
pip install -U langgraph langchain langchain-openai
python -m pip show langgraph

6) Optional packages (pick as needed)

If you add a web/search tool later, install its SDK (e.g., tavily-python) alongside LangGraph. 
PyPI
Anakin.ai